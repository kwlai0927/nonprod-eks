name: Deploy ECR Chart to EKS

on:
  repository_dispatch:
    types:
    - deploy-stdchart

  workflow_dispatch:
    inputs:
      stdchart:
        required: true
        type: choice
        description: The standard chart used to deploy
        default: kwlai0927/nextjs-chart
        options:
          - spa-chart
          - nextjs-chart
          - srv-chart
      imageUrl:
        required: true
        type: string
        description: The image url, e.g. 418295696814.dkr.ecr.ap-southeast-1.amazonaws.com/kwlai0927/nextjs-chart:latest
      deploy-namespace:
        required: true
        type: string
        description: The kubernetes namespace to deploy

permissions:
  id-token: write # This is required for aws-actions/configure-aws-credentials@v4
  contents: write  # This is required for actions/checkout

jobs:
  
  build-chart:
    name: Gen and Push Helm Chart
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.deploy-namespace && inputs.deploy-namespace || github.event.client_payload.deploy-namespace }}
    outputs:
      region: ${{ steps.params.outputs.region }}
      cluster-name: ${{ steps.params.outputs.cluster-name }}
      registry: ${{ steps.login-ecr.outputs.registry }}
      chart-namespace: ${{ steps.params.outputs.chart-namespace }}
      chart-name: ${{ steps.params.outputs.chart-name }}
      version: ${{ steps.params.outputs.version }}
      project: ${{ steps.params.outputs.project }}
      repository: ${{ steps.params.outputs.repository }}
      component: ${{ steps.params.outputs.component }}
      deploy-namespace: ${{ steps.params.outputs.deploy-namespace }}
    steps:
    - name: 00. Gen Params
      id: params
      run: |
        imageUrl=${{ inputs.imageUrl && inputs.imageUrl || github.event.client_payload.imageUrl }}
        echo "imageUrl=${imageUrl}" >> $GITHUB_OUTPUT
        
        imageNamespace=$(echo $imageUrl | cut -d'/' -f2)
        echo "image-namespace=${imageNamespace}" >> $GITHUB_OUTPUT
        
        repositoryWithTag=$(echo $imageUrl | cut -d'/' -f3)
        repository=$(echo $repositoryWithTag | cut -d':' -f1)
        echo "repository=${repository}" >> $GITHUB_OUTPUT
        
        tag=$(echo $repositoryWithTag | cut -d':' -f2)
        echo "tag=${tag}" >> $GITHUB_OUTPUT
        echo "version=v${tag}" >> $GITHUB_OUTPUT
        
        # 解析 repository: stars-player -> project: stars, component: player
        project=$(echo $repository | cut -d'-' -f1)
        echo "project=${project}" >> $GITHUB_OUTPUT
        
        component=$(echo $repository | cut -d'-' -f2-)
        echo "component=${component}" >> $GITHUB_OUTPUT
        
        echo "chart-name=${repository}-chart" >> $GITHUB_OUTPUT
        echo "chart-namespace=${imageNamespace}" >> $GITHUB_OUTPUT

        stdchart=$(echo ${{ inputs.stdchart && inputs.stdchart || github.event.client_payload.stdchart }} | cut -d'/' -f2)
        echo "stdchart=${stdchart}" >> $GITHUB_OUTPUT
        echo "region=ap-southeast-1" >> $GITHUB_OUTPUT
        echo "cluster-name=nonprod-eks" >> $GITHUB_OUTPUT
        deploy-namespace=${{ inputs.deploy-namespace && inputs.deploy-namespace || github.event.client_payload.deploy-namespace }}
        echo "deploy-namespace=${deploy-namespace}" >> $GITHUB_OUTPUT

    - name: 01. Checkout
      uses: actions/checkout@v4
    - name: 02. Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_NONPROD_ARTIFAT_ROLE_ARN }}
        aws-region: ${{ steps.params.outputs.region }}
    - name: 03. Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - name: 04. Install Helm CLI
      uses: azure/setup-helm@v4.2.0
      id: install
    - name: 05. Helm Login to Amazon ECR
      id: login-helm-ecr
      run: aws ecr get-login-password --region ${{ steps.params.outputs.region }} | helm registry login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
    - name: 06. Create ECR Repository if not exists
      run: |
        # 檢查 ECR repository 是否存在，如果不存在則建立
        if ! aws ecr describe-repositories --repository-names ${{ steps.params.outputs.chart-namespace }}/${{ steps.params.outputs.chart-name }} --region ${{ steps.params.outputs.region }} 2>/dev/null; then
          echo "Creating ECR repository: ${{ steps.params.outputs.chart-namespace }}/${{ steps.params.outputs.chart-name }}"
          aws ecr create-repository \
            --repository-name ${{ steps.params.outputs.chart-namespace }}/${{ steps.params.outputs.chart-name }} \
            --region ${{ steps.params.outputs.region }} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
        else
          echo "ECR repository already exists: ${{ steps.params.outputs.chart-namespace }}/${{ steps.params.outputs.chart-name }}"
        fi
    - name: 07. Update Helm appVersion
      id: charts
      uses: fjogeleit/yaml-update-action@main
      with:
        commitChange: false
        message: 'Update Helm Version ${{ steps.params.outputs.version }}'
        changes: |
          {
            "stdcharts/${{ steps.params.outputs.stdchart }}/Chart.yaml": {
              "version": "${{ steps.params.outputs.version }}",
              "appVersion": "${{ steps.params.outputs.version }}",
              "name": "${{ steps.params.outputs.chart-name }}",
              "annotations": {
                "project": "${{ steps.params.outputs.project }}",
                "image": "${{ steps.params.outputs.imageUrl }}",
                "component": "${{ steps.params.outputs.component }}"
              }
            }
          }
    - name: 08. Push Helm chart to ECR
      working-directory: stdcharts/${{ steps.params.outputs.stdchart }}
      run: |
        helm package .
        FILE=$(find $PWD -name '${{ steps.params.outputs.chart-name }}-*.tgz' -type f)
        helm push $FILE oci://${{ steps.login-ecr.outputs.registry }}/${{ steps.params.outputs.chart-namespace }}

  deploy:
    name: Deploy Helm to Kubernetes by Standard Chart
    runs-on: ubuntu-latest
    needs: build-chart
    environment:
      name: ${{ needs.build-chart.outputs.deploy-namespace }}

    steps:

    - name: 01. Checkout
      uses: actions/checkout@v4

    - name: 02. Configure AWS credentials
      id: credential
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ needs.build-chart.outputs.region }}
        role-to-assume: ${{ secrets.AWS_NONPROD_DEPLOY_ROLE_ARN }}

    - name: 03. install Helm CLI
      uses: azure/setup-helm@v4.2.0
      id: install

    - name: 04. Helm Login to Amazon ECR
      id: login-ecr
      run: aws ecr get-login-password --region ${{ needs.build-chart.outputs.region }} | helm registry login --username AWS --password-stdin ${{ needs.build-chart.outputs.registry }}

    - name: 05. Install kubectl
      uses: azure/setup-kubectl@v4.0.0

    - name: 06. Update kubeconfig
      run: aws eks update-kubeconfig --name ${{ needs.build-chart.outputs.cluster-name }}

    - name: 07. Deploy helm chart to EKS
      working-directory: ${{ needs.build-chart.outputs.project }}/${{ needs.build-chart.outputs.deploy-namespace }}/${{ needs.build-chart.outputs.repository }}
      run: |
        helm upgrade -i -f values.yaml -n ${{ needs.build-chart.outputs.deploy-namespace }} \
        --version ${{ needs.build-chart.outputs.version }} \
        --create-namespace \
        ${{ needs.build-chart.outputs.deploy-namespace }}-${{ needs.build-chart.outputs.component }} oci://${{ needs.build-chart.outputs.registry }}/${{ needs.build-chart.outputs.chart-namespace }}/${{ needs.build-chart.outputs.chart-name }}
